[
  {
    "title": "naio.sh – Nmap All-In-One Scanner (Bash)",
    "motivation": "To streamline reconnaissance on VirtualBox-hosted targets during local pentesting labs.",
    "details": "A Bash script that automates a full Nmap workflow. Identifies live hosts, filters VirtualBox MACs, detects OS and services, and summarizes results per host — saving all output to local files.",
    "skills": ["Bash Scripting", "Nmap", "Automation", "Network Scanning", "Reconnaissance"],
    "links": [
      { "url": "https://github.com/AbdulrazzakSwai/Cybersecurity-Scripts", "title": "naio.sh on GitHub" }
    ]
  },
  {
    "title": "Caesar and Vigenère Ciphers (Python)",
    "motivation": "To learn fundamental programming concepts in Python by building a basic text-based cipher application.",
    "details": "Developed a cipher program in Python to practice core concepts such as variables, functions, loops, f-strings, and conditionals. Focused on implementing encryption logic and gaining hands-on experience with string manipulation.",
    "skills": ["Python", "String Manipulation", "Variables", "Functions", "Loops", "Conditional Statements", "f-Strings"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-string-manipulation-by-building-a-cipher",
        "title": "freeCodeCamp - Cipher"
      }
    ]
  },
  {
    "title": "Luhn Algorithm (Python)",
    "motivation": "To gain experience with numerical computations and string manipulation with Python by implementing a common error-checking algorithm.",
    "details": "Built an application that validates numbers using the Luhn Algorithm, commonly used for credit card number verification. Practiced working with numbers, strings, loops, and conditional logic to implement the checksum calculation.",
    "skills": ["Python", "Numerical Computations", "String Manipulation", "Loops", "Conditional Logic", "Algorithms"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-how-to-work-with-numbers-and-strings-by-implementing-the-luhn-algorithm",
        "title": "freeCodeCamp - Luhn Algorithm"
      }
    ]
  },
  {
    "title": "Expense Tracker (Python)",
    "motivation": "To explore the use of lambda functions for writing efficient operations in Python.",
    "details": "Built an expense tracker application that leverages lambda functions to process and organize transaction data. Practiced using Python’s functional programming features to filter, sort, and calculate summaries in an easy way.",
    "skills": ["Python", "Lambda Functions", "Data Processing", "List Manipulation"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-lambda-functions-by-building-an-expense-tracker",
        "title": "freeCodeCamp - Expense Tracker"
      }
    ]
  },
  {
    "title": "Case Converter (Pytnon)",
    "motivation": "To learn how to use list comprehension for transforming text more efficiently in Python.",
    "details": "Built a program that converts CamelCase or PascalCase strings into snake_case. First implemented the logic using a for loop, then rebuilt it using list comprehension to make the process easier. Practiced iterating over strings, conditional logic, and formatting output.",
    "skills": ["Python", "List Comprehension", "String Manipulation", "For Loops", "Conditional Logic"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-list-comprehension-by-building-a-case-converter-program",
        "title": "freeCodeCamp - Case Converter"
      }
    ]
  },
  {
    "title": "Square Root Finder (Bisection Method) (Python)",
    "motivation": "To understand and apply the bisection method for approximating the square root of a number using numerical techniques.",
    "details": "Built a Python program that finds the square root of a number by repeatedly narrowing the search range using the bisection method. Practiced implementing iterative logic, handling precision, and working with floating-point comparisons in numerical analysis.",
    "skills": ["Python", "Bisection Method", "Numerical Methods", "Iterative Algorithms"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-the-bisection-method-by-finding-the-square-root-of-a-number",
        "title": "freeCodeCamp - Square Root Finder (Bisection Method)"
      }
    ]
  },
  {
    "title": "Password Generator (Python)",
    "motivation": "To learn how to use regular expressions and Python modules by building a secure password generator.",
    "details": "Built a password generator that creates secure passwords based on specific rules. Learned how to import and use modules from the Python standard library and apply regular expressions to validate password strength and format.",
    "skills": ["Python", "Regular Expressions", "Library Modules", "Pattern Matching", "Randomization"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-regular-expressions-by-building-a-password-generator",
        "title": "freeCodeCamp - Password Generator"
      }
    ]
  },
  {
    "title": "Shortest Path Algorithm (Python)",
    "motivation": "To learn algorithm design by implementing a shortest path algorithm using core Python programming techniques.",
    "details": "Built a program that calculates the shortest path between nodes using functions, loops, and conditionals. Practiced using dictionary comprehensions and control structures to manage graph traversal and optimize pathfinding logic.",
    "skills": ["Python", "Algorithm Design", "Dictionary Comprehension", "Control Flow", "Graph Traversal", "Functions", "Loops", "Conditionals"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-algorithm-design-by-building-a-shortest-path-algorithm",
        "title": "freeCodeCamp - Shortest Path Algorithm"
      }
    ]
  },
  {
    "title": "Tower of Hanoi Solver (Python)",
    "motivation": "To understand the concept of recursion by solving the classic Tower of Hanoi puzzle in Python.",
    "details": "Built a program that solves the Tower of Hanoi puzzle using both iterative and recursive approaches. Gained hands-on experience with breaking down a problem into smaller subproblems, and implementing a base case and recursive step to achieve a complete solution.",
    "skills": ["Python", "Recursion", "Loops", "Problem Solving", "Algorithm Design"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-recursion-by-solving-the-tower-of-hanoi-puzzle",
        "title": "freeCodeCamp - Tower of Hanoi"
      }
    ]
  },
  {
    "title": "Merge Sort Algorithm (Python)",
    "motivation": "To learn how to work with data structures by implementing the Merge Sort algorithm using the divide and conquer approach.",
    "details": "Built a program that sorts a list of random numbers using the Merge Sort algorithm. Practiced recursive function design, list manipulation, and understanding how data structures can be efficiently organized and processed during sorting.",
    "skills": ["Python", "Merge Sort", "Recursion", "Divide and Conquer", "Data Structures", "List Manipulation"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-data-structures-by-building-the-merge-sort-algorithm",
        "title": "freeCodeCamp - Merge Sort Algorithm"
      }
    ]
  },
  {
    "title": "Sudoku Solver (Python)",
    "motivation": "To apply object-oriented programming concepts by building and solving a Sudoku puzzle using classes and objects.",
    "details": "Developed a Sudoku solver that represents the puzzle grid and logic using classes and objects. Practiced encapsulating data, defining methods for puzzle validation and solving, and applying recursion and backtracking techniques for the solution.",
    "skills": ["Python", "Object-Oriented Programming", "Classes", "Objects", "Recursion", "Problem Solving"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-classes-and-objects-by-building-a-sudoku-solver",
        "title": "freeCodeCamp - Sudoku Solver"
      }
    ]
  },
  {
    "title": "Binary Search Tree (Python)",
    "motivation": "To understand tree traversal and key data structure operations by building and working with a Binary Search Tree.",
    "details": "Constructed a Binary Search Tree (BST) from scratch and implemented core operations such as insertion, search, deletion, and in-order traversal. Practiced recursive function design and learned how hierarchical data structures can improve efficiency in searching and sorting.",
    "skills": ["Python", "Binary Search Tree", "Tree Traversal", "Recursion", "Data Structures", "Search Algorithms", "Insertion and Deletion"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-tree-traversal-by-building-a-binary-search-tree",
        "title": "freeCodeCamp - Binary Search Tree"
      }
    ]
  },
  {
    "title": "Vector Space (Python)",
    "motivation": "To explore Python's special methods by building a vector space and customizing object behavior for mathematical operations.",
    "details": "Built Python classes to represent vectors and implemented special methods like `__add__`, `__sub__`, `__repr__`, and `__eq__`. Gained hands-on experience with customizing object methods to model vector arithmetic and comparisons.",
    "skills": ["Python", "Special Methods", "Object-Oriented Programming", "Vectors", "Arithmetic Operations", "Custom Object Behavior"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-special-methods-by-building-a-vector-space",
        "title": "freeCodeCamp - Vector Space"
      }
    ]
  },
  {
    "title": "Equation Solver (Python)",
    "motivation": "To apply object-oriented principles by implementing interfaces using abstract classes in Python.",
    "details": "Built an equation solver using an abstract base class to define a formal interface. Developed linear and quadratic equation subclasses that override the abstract methods `solve()` and `analyze()`. Practiced interface enforcement, inheritance, and method overriding to ensure consistent structure across related classes.",
    "skills": ["Python", "Object-Oriented Programming", "Abstract Classes", "Inheritance"],
    "links": [
      {
        "url": "https://www.freecodecamp.org/learn/scientific-computing-with-python/#learn-interfaces-by-building-an-equation-solver",
        "title": "freeCodeCamp - Equation Solver"
      }
    ]
  }
]
